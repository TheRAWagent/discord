generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model test {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model profile{
  objectID String @id @default(auto()) @map("_id") @db.ObjectId
  id String @default(uuid()) @unique
  userId String @unique
  name String
  imageUrl String
  email String

  servers server[]
  members member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model server{
  objectID String @id @default(auto()) @map("_id") @db.ObjectId
  id String @default(uuid()) @unique
  // userId String @unique
  name String
  imageUrl String
  // email String
  inviteCode String @unique

  members member[]
  channels Channel[]

  profileId String
  profile profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index ([profileId])
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model member{
  objectID String @id @default(auto()) @map("_id") @db.ObjectId
  id String @default(uuid()) @unique
  role MemberRole @default(GUEST)

  profileId String
  profile profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages message[]
  conversationsInitiatd conversation[] @relation("MemberOne")
  conversationsReceived conversation[] @relation("MemberTwo")

  directMessages directMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index ([profileId])
  @@index ([serverId])
}

enum ChanelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  objectID String @id @default(auto()) @map("_id") @db.ObjectId
  id String @default(uuid()) @unique
  name String
  type ChanelType @default(TEXT)

  profileId String
  profile profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index ([profileId])
  @@index ([serverId])
}

model message{
  objectID String @id @default(auto()) @map("_id") @db.ObjectId
  id String @default(uuid()) @unique
  content String @db.String

  fileUrl String? @db.String

  memberId String
  member member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index ([memberId])
  @@index ([channelId])
}

model conversation{
  objectID String @id @default(auto()) @map("_id") @db.ObjectId
  id String @default(uuid()) @unique

  memberOneId String
  memberOne member @relation("MemberOne",fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo member @relation("MemberTwo",fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages directMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index ([memberOneId])
  @@index ([memberTwoId])
  @@unique([memberOneId,memberTwoId])
}

model directMessage{
  objectID String @id @default(auto()) @map("_id") @db.ObjectId
  id String @default(uuid()) @unique
  content String @db.String

  fileUrl String @db.String

  memberId String
  member member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index ([memberId])
  @@index ([conversationId])
}